// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: panopticon.proto

package panopticon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Panopticon_Query_FullMethodName             = "/panopticon.Panopticon/Query"
	Panopticon_ProcessBotQueries_FullMethodName = "/panopticon.Panopticon/ProcessBotQueries"
)

// PanopticonClient is the client API for Panopticon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PanopticonClient interface {
	Query(ctx context.Context, in *BotQuery, opts ...grpc.CallOption) (*Inference, error)
	ProcessBotQueries(ctx context.Context, opts ...grpc.CallOption) (Panopticon_ProcessBotQueriesClient, error)
}

type panopticonClient struct {
	cc grpc.ClientConnInterface
}

func NewPanopticonClient(cc grpc.ClientConnInterface) PanopticonClient {
	return &panopticonClient{cc}
}

func (c *panopticonClient) Query(ctx context.Context, in *BotQuery, opts ...grpc.CallOption) (*Inference, error) {
	out := new(Inference)
	err := c.cc.Invoke(ctx, Panopticon_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panopticonClient) ProcessBotQueries(ctx context.Context, opts ...grpc.CallOption) (Panopticon_ProcessBotQueriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Panopticon_ServiceDesc.Streams[0], Panopticon_ProcessBotQueries_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &panopticonProcessBotQueriesClient{stream}
	return x, nil
}

type Panopticon_ProcessBotQueriesClient interface {
	Send(*BotQueryBatch) error
	Recv() (*Inference, error)
	grpc.ClientStream
}

type panopticonProcessBotQueriesClient struct {
	grpc.ClientStream
}

func (x *panopticonProcessBotQueriesClient) Send(m *BotQueryBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *panopticonProcessBotQueriesClient) Recv() (*Inference, error) {
	m := new(Inference)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PanopticonServer is the server API for Panopticon service.
// All implementations must embed UnimplementedPanopticonServer
// for forward compatibility
type PanopticonServer interface {
	Query(context.Context, *BotQuery) (*Inference, error)
	ProcessBotQueries(Panopticon_ProcessBotQueriesServer) error
	mustEmbedUnimplementedPanopticonServer()
}

// UnimplementedPanopticonServer must be embedded to have forward compatible implementations.
type UnimplementedPanopticonServer struct {
}

func (UnimplementedPanopticonServer) Query(context.Context, *BotQuery) (*Inference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedPanopticonServer) ProcessBotQueries(Panopticon_ProcessBotQueriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessBotQueries not implemented")
}
func (UnimplementedPanopticonServer) mustEmbedUnimplementedPanopticonServer() {}

// UnsafePanopticonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PanopticonServer will
// result in compilation errors.
type UnsafePanopticonServer interface {
	mustEmbedUnimplementedPanopticonServer()
}

func RegisterPanopticonServer(s grpc.ServiceRegistrar, srv PanopticonServer) {
	s.RegisterService(&Panopticon_ServiceDesc, srv)
}

func _Panopticon_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanopticonServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Panopticon_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanopticonServer).Query(ctx, req.(*BotQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Panopticon_ProcessBotQueries_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PanopticonServer).ProcessBotQueries(&panopticonProcessBotQueriesServer{stream})
}

type Panopticon_ProcessBotQueriesServer interface {
	Send(*Inference) error
	Recv() (*BotQueryBatch, error)
	grpc.ServerStream
}

type panopticonProcessBotQueriesServer struct {
	grpc.ServerStream
}

func (x *panopticonProcessBotQueriesServer) Send(m *Inference) error {
	return x.ServerStream.SendMsg(m)
}

func (x *panopticonProcessBotQueriesServer) Recv() (*BotQueryBatch, error) {
	m := new(BotQueryBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Panopticon_ServiceDesc is the grpc.ServiceDesc for Panopticon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Panopticon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "panopticon.Panopticon",
	HandlerType: (*PanopticonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Panopticon_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessBotQueries",
			Handler:       _Panopticon_ProcessBotQueries_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "panopticon.proto",
}
