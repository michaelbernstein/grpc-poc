// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: panopticon.proto

package panopticon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Inference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp               *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BehaviorStartTimestamp  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=behavior_start_timestamp,json=behaviorStartTimestamp,proto3" json:"behavior_start_timestamp,omitempty"`
	BehaviorEndTimestamp    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=behavior_end_timestamp,json=behaviorEndTimestamp,proto3" json:"behavior_end_timestamp,omitempty"`
	Duration                *durationpb.Duration   `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	IsBot                   bool                   `protobuf:"varint,5,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	ConfidenceScore         float32                `protobuf:"fixed32,6,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`
	BotCategory             string                 `protobuf:"bytes,7,opt,name=bot_category,json=botCategory,proto3" json:"bot_category,omitempty"`
	RiskLevel               string                 `protobuf:"bytes,8,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`
	Reasoning               []string               `protobuf:"bytes,9,rep,name=reasoning,proto3" json:"reasoning,omitempty"`
	ResponseAction          string                 `protobuf:"bytes,10,opt,name=response_action,json=responseAction,proto3" json:"response_action,omitempty"`
	TraceId                 string                 `protobuf:"bytes,11,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Geolocation             string                 `protobuf:"bytes,12,opt,name=geolocation,proto3" json:"geolocation,omitempty"`
	ConfidenceIntervalLower float32                `protobuf:"fixed32,13,opt,name=confidence_interval_lower,json=confidenceIntervalLower,proto3" json:"confidence_interval_lower,omitempty"`
	ConfidenceIntervalUpper float32                `protobuf:"fixed32,14,opt,name=confidence_interval_upper,json=confidenceIntervalUpper,proto3" json:"confidence_interval_upper,omitempty"`
}

func (x *Inference) Reset() {
	*x = Inference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_panopticon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inference) ProtoMessage() {}

func (x *Inference) ProtoReflect() protoreflect.Message {
	mi := &file_panopticon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inference.ProtoReflect.Descriptor instead.
func (*Inference) Descriptor() ([]byte, []int) {
	return file_panopticon_proto_rawDescGZIP(), []int{0}
}

func (x *Inference) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Inference) GetBehaviorStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.BehaviorStartTimestamp
	}
	return nil
}

func (x *Inference) GetBehaviorEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.BehaviorEndTimestamp
	}
	return nil
}

func (x *Inference) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Inference) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *Inference) GetConfidenceScore() float32 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

func (x *Inference) GetBotCategory() string {
	if x != nil {
		return x.BotCategory
	}
	return ""
}

func (x *Inference) GetRiskLevel() string {
	if x != nil {
		return x.RiskLevel
	}
	return ""
}

func (x *Inference) GetReasoning() []string {
	if x != nil {
		return x.Reasoning
	}
	return nil
}

func (x *Inference) GetResponseAction() string {
	if x != nil {
		return x.ResponseAction
	}
	return ""
}

func (x *Inference) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *Inference) GetGeolocation() string {
	if x != nil {
		return x.Geolocation
	}
	return ""
}

func (x *Inference) GetConfidenceIntervalLower() float32 {
	if x != nil {
		return x.ConfidenceIntervalLower
	}
	return 0
}

func (x *Inference) GetConfidenceIntervalUpper() float32 {
	if x != nil {
		return x.ConfidenceIntervalUpper
	}
	return 0
}

type BotQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url                    string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	UserAgent              string            `protobuf:"bytes,2,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Referrer               string            `protobuf:"bytes,3,opt,name=referrer,proto3" json:"referrer,omitempty"`
	JA3Hash                string            `protobuf:"bytes,4,opt,name=JA3_hash,json=JA3Hash,proto3" json:"JA3_hash,omitempty"`
	IpAddress              string            `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	SessionId              string            `protobuf:"bytes,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	HttpHeaders            map[string]string `protobuf:"bytes,7,rep,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RequestMethod          string            `protobuf:"bytes,8,opt,name=request_method,json=requestMethod,proto3" json:"request_method,omitempty"`
	RequestPayloadSize     int32             `protobuf:"varint,9,opt,name=request_payload_size,json=requestPayloadSize,proto3" json:"request_payload_size,omitempty"`
	RequestsCountInSession int32             `protobuf:"varint,10,opt,name=requests_count_in_session,json=requestsCountInSession,proto3" json:"requests_count_in_session,omitempty"`
	ReferralPath           string            `protobuf:"bytes,11,opt,name=referral_path,json=referralPath,proto3" json:"referral_path,omitempty"`
	InteractionTime        float64           `protobuf:"fixed64,12,opt,name=interaction_time,json=interactionTime,proto3" json:"interaction_time,omitempty"`
}

func (x *BotQuery) Reset() {
	*x = BotQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_panopticon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotQuery) ProtoMessage() {}

func (x *BotQuery) ProtoReflect() protoreflect.Message {
	mi := &file_panopticon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotQuery.ProtoReflect.Descriptor instead.
func (*BotQuery) Descriptor() ([]byte, []int) {
	return file_panopticon_proto_rawDescGZIP(), []int{1}
}

func (x *BotQuery) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BotQuery) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *BotQuery) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *BotQuery) GetJA3Hash() string {
	if x != nil {
		return x.JA3Hash
	}
	return ""
}

func (x *BotQuery) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *BotQuery) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BotQuery) GetHttpHeaders() map[string]string {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

func (x *BotQuery) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *BotQuery) GetRequestPayloadSize() int32 {
	if x != nil {
		return x.RequestPayloadSize
	}
	return 0
}

func (x *BotQuery) GetRequestsCountInSession() int32 {
	if x != nil {
		return x.RequestsCountInSession
	}
	return 0
}

func (x *BotQuery) GetReferralPath() string {
	if x != nil {
		return x.ReferralPath
	}
	return ""
}

func (x *BotQuery) GetInteractionTime() float64 {
	if x != nil {
		return x.InteractionTime
	}
	return 0
}

type BotQueryBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*BotQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *BotQueryBatch) Reset() {
	*x = BotQueryBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_panopticon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotQueryBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotQueryBatch) ProtoMessage() {}

func (x *BotQueryBatch) ProtoReflect() protoreflect.Message {
	mi := &file_panopticon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotQueryBatch.ProtoReflect.Descriptor instead.
func (*BotQueryBatch) Descriptor() ([]byte, []int) {
	return file_panopticon_proto_rawDescGZIP(), []int{2}
}

func (x *BotQueryBatch) GetQueries() []*BotQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

var File_panopticon_proto protoreflect.FileDescriptor

var file_panopticon_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x61, 0x6e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x70, 0x61, 0x6e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa4, 0x05, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x54, 0x0a, 0x18, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a,
	0x16, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x6f, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x55, 0x70, 0x70, 0x65, 0x72, 0x22, 0x9e, 0x04, 0x0a, 0x08, 0x42, 0x6f, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x4a, 0x41, 0x33, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4a, 0x41, 0x33, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x61, 0x6e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x19,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x48, 0x74, 0x74, 0x70, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x0d, 0x42, 0x6f, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x6e, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x32, 0x8f, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x6e,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x14, 0x2e, 0x70, 0x61, 0x6e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x42, 0x6f,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x15, 0x2e, 0x70, 0x61, 0x6e, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x6e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x6f,
	0x6e, 0x2e, 0x42, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a,
	0x15, 0x2e, 0x70, 0x61, 0x6e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0d, 0x5a, 0x0b, 0x70, 0x61,
	0x6e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_panopticon_proto_rawDescOnce sync.Once
	file_panopticon_proto_rawDescData = file_panopticon_proto_rawDesc
)

func file_panopticon_proto_rawDescGZIP() []byte {
	file_panopticon_proto_rawDescOnce.Do(func() {
		file_panopticon_proto_rawDescData = protoimpl.X.CompressGZIP(file_panopticon_proto_rawDescData)
	})
	return file_panopticon_proto_rawDescData
}

var file_panopticon_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_panopticon_proto_goTypes = []interface{}{
	(*Inference)(nil),             // 0: panopticon.Inference
	(*BotQuery)(nil),              // 1: panopticon.BotQuery
	(*BotQueryBatch)(nil),         // 2: panopticon.BotQueryBatch
	nil,                           // 3: panopticon.BotQuery.HttpHeadersEntry
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 5: google.protobuf.Duration
}
var file_panopticon_proto_depIdxs = []int32{
	4, // 0: panopticon.Inference.timestamp:type_name -> google.protobuf.Timestamp
	4, // 1: panopticon.Inference.behavior_start_timestamp:type_name -> google.protobuf.Timestamp
	4, // 2: panopticon.Inference.behavior_end_timestamp:type_name -> google.protobuf.Timestamp
	5, // 3: panopticon.Inference.duration:type_name -> google.protobuf.Duration
	3, // 4: panopticon.BotQuery.http_headers:type_name -> panopticon.BotQuery.HttpHeadersEntry
	1, // 5: panopticon.BotQueryBatch.queries:type_name -> panopticon.BotQuery
	1, // 6: panopticon.Panopticon.Query:input_type -> panopticon.BotQuery
	2, // 7: panopticon.Panopticon.ProcessBotQueries:input_type -> panopticon.BotQueryBatch
	0, // 8: panopticon.Panopticon.Query:output_type -> panopticon.Inference
	0, // 9: panopticon.Panopticon.ProcessBotQueries:output_type -> panopticon.Inference
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_panopticon_proto_init() }
func file_panopticon_proto_init() {
	if File_panopticon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_panopticon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_panopticon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_panopticon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotQueryBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_panopticon_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_panopticon_proto_goTypes,
		DependencyIndexes: file_panopticon_proto_depIdxs,
		MessageInfos:      file_panopticon_proto_msgTypes,
	}.Build()
	File_panopticon_proto = out.File
	file_panopticon_proto_rawDesc = nil
	file_panopticon_proto_goTypes = nil
	file_panopticon_proto_depIdxs = nil
}
